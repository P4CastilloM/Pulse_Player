Index: app/src/main/java/com/example/pulseplayer/views/MusicScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pulseplayer.views\r\n\r\nimport androidx.compose.animation.animateColorAsState\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.NavController\r\nimport coil.compose.rememberAsyncImagePainter\r\nimport com.example.pulseplayer.Music\r\nimport com.example.pulseplayer.NowPlaying\r\nimport com.example.pulseplayer.R\r\nimport com.example.pulseplayer.data.PulsePlayerDatabase\r\nimport com.example.pulseplayer.data.entity.Song\r\nimport com.example.pulseplayer.ui.components.MiniPlayerBar\r\nimport com.example.pulseplayer.views.viewmodel.PlayerViewModel\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.flow.first\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun MusicScreen(navController: NavController) {\r\n    val context = LocalContext.current\r\n    val scope = rememberCoroutineScope()\r\n    var songs by remember { mutableStateOf<List<Song>>(emptyList()) }\r\n    var selectedSongId by remember { mutableStateOf<Int?>(null) }\r\n    val playerViewModel: PlayerViewModel = viewModel()\r\n\r\n    LaunchedEffect(Unit) {\r\n        scope.launch(Dispatchers.IO) {\r\n            val dao = PulsePlayerDatabase.getDatabase(context).songDao()\r\n            songs = dao.getAll().first()\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            TopAppBar(\r\n                title = {\r\n                    Text(\r\n                        text = stringResource(R.string.title_music),\r\n                        color = Color.White,\r\n                        fontSize = 24.sp,\r\n                        fontWeight = FontWeight.Bold\r\n                    )\r\n                },\r\n                colors = TopAppBarDefaults.topAppBarColors(containerColor = Color.Black),\r\n            )\r\n        },\r\n        bottomBar = {\r\n            MiniPlayerBar(\r\n                navController = navController,\r\n                modifier = Modifier.fillMaxWidth().wrapContentHeight().navigationBarsPadding(),\r\n            )\r\n        },\r\n        containerColor = Color.Black,\r\n    ) { padding ->\r\n        LazyColumn(\r\n            contentPadding = padding,\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .background(Color.Black)\r\n                .padding(WindowInsets.systemBars.asPaddingValues())\r\n        ) {\r\n            items(songs) { song ->\r\n                SongCardItem(\r\n                    song = song,\r\n                    isSelected = playerViewModel.currentSong.value?.idSong == song.idSong,\r\n                    onClick = {\r\n//                        playerViewModel.playSong(song) //reproducir la canción seleccionada\r\n                        val allSongIds = songs.map { it.idSong } //navegar a la pantalla de reproducción\r\n                        val startIndex = songs.indexOfFirst { it.idSong == song.idSong }\r\n                        playerViewModel.playPlaylist(songs, startIndex)\r\n                        navController.navigate(NowPlaying(song.idSong, allSongIds)) {\r\n                            popUpTo(Music) { inclusive = false }\r\n                            launchSingleTop = true\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun SongCardItem(song: Song, isSelected: Boolean, onClick: () -> Unit) {\r\n    val borderColor by animateColorAsState(\r\n        targetValue = if (isSelected) Color(0xFF9C27B0) else Color.Transparent,\r\n        label = \"borderColor\"\r\n    )\r\n\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 12.dp, vertical = 6.dp)\r\n            .border(2.dp, borderColor, shape = RoundedCornerShape(16.dp))\r\n            .clickable { onClick() },\r\n        colors = CardDefaults.cardColors(containerColor = Color(0xFF1C1C1E)),\r\n        shape = RoundedCornerShape(16.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            val painter = rememberAsyncImagePainter(\r\n                model = song.coverImage?.ifEmpty { R.drawable.ic_music_placeholder }\r\n            )\r\n\r\n            Image(\r\n                painter = painter,\r\n                contentDescription = \"Cover\",\r\n                contentScale = ContentScale.Crop,\r\n                modifier = Modifier\r\n                    .size(56.dp)\r\n                    .clip(CircleShape)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.width(12.dp))\r\n\r\n            Column(modifier = Modifier.weight(1f)) {\r\n                Text(song.title, color = Color.White, fontSize = 16.sp, fontWeight = FontWeight.Bold)\r\n                Text(song.artistName, color = Color.LightGray, fontSize = 14.sp)\r\n            }\r\n\r\n            Text(song.formattedDuration, color = Color.White, fontSize = 14.sp)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/pulseplayer/views/MusicScreen.kt b/app/src/main/java/com/example/pulseplayer/views/MusicScreen.kt
--- a/app/src/main/java/com/example/pulseplayer/views/MusicScreen.kt	(revision 52e0a7045016f73aac0972dccb3d8795f4e857af)
+++ b/app/src/main/java/com/example/pulseplayer/views/MusicScreen.kt	(date 1752120069231)
@@ -32,6 +32,7 @@
 import com.example.pulseplayer.data.entity.Song
 import com.example.pulseplayer.ui.components.MiniPlayerBar
 import com.example.pulseplayer.views.viewmodel.PlayerViewModel
+import com.example.pulseplayer.views.viewmodel.SongViewModel
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.launch
 import kotlinx.coroutines.flow.first
@@ -41,16 +42,11 @@
 fun MusicScreen(navController: NavController) {
     val context = LocalContext.current
     val scope = rememberCoroutineScope()
-    var songs by remember { mutableStateOf<List<Song>>(emptyList()) }
-    var selectedSongId by remember { mutableStateOf<Int?>(null) }
+    val songViewModel: SongViewModel = viewModel()
+    val songs by songViewModel.allSongs.collectAsState()
     val playerViewModel: PlayerViewModel = viewModel()
+    var selectedSongId by remember { mutableStateOf<Int?>(null) }
 
-    LaunchedEffect(Unit) {
-        scope.launch(Dispatchers.IO) {
-            val dao = PulsePlayerDatabase.getDatabase(context).songDao()
-            songs = dao.getAll().first()
-        }
-    }
 
     Scaffold(
         topBar = {
Index: app/src/main/java/com/example/pulseplayer/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pulseplayer\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.app.NotificationManager\r\nimport android.content.res.Configuration\r\nimport android.util.Log\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.ProcessLifecycleOwner\r\nimport com.example.pulseplayer.data.PulsePlayerDatabase\r\nimport com.example.pulseplayer.ui.theme.PulsePlayerTheme\r\nimport com.example.pulseplayer.util.MusicScanner\r\nimport com.example.pulseplayer.views.AppLifecycleObserver\r\nimport com.example.pulseplayer.views.player.ExoPlayerManager\r\nimport com.example.pulseplayer.views.service.MusicPlayerService\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.withContext\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        // \uD83D\uDC49 Solicita permisos necesarios al iniciar\r\n        requestAllPermissions()\r\n\r\n        // \uD83D\uDC49 Observador del ciclo de vida para activar/desactivar la notificación\r\n        ProcessLifecycleOwner.get().lifecycle.addObserver(\r\n            AppLifecycleObserver(\r\n                onAppBackgrounded = {\r\n                    if (ExoPlayerManager.getPlayer()?.isPlaying == true) {\r\n                        val intent = Intent(this, MusicPlayerService::class.java)\r\n                        ContextCompat.startForegroundService(this, intent)\r\n                    }\r\n                },\r\n                onAppForegrounded = {\r\n                    val manager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager\r\n                    manager.cancel(1) // Oculta la notificación al volver a la app\r\n                }\r\n            )\r\n        )\r\n\r\n        enableEdgeToEdge()\r\n        setContent {\r\n            PulsePlayerTheme {\r\n                PulsePlayerApp()\r\n            }\r\n        }\r\n    }\r\n\r\n    // ✅ Pide todos los permisos necesarios (según la versión de Android)\r\n    private fun requestAllPermissions() {\r\n        val permissions = mutableListOf<String>()\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n            if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.READ_MEDIA_AUDIO)\r\n                != PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                permissions.add(android.Manifest.permission.READ_MEDIA_AUDIO)\r\n            }\r\n            if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.POST_NOTIFICATIONS)\r\n                != PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                permissions.add(android.Manifest.permission.POST_NOTIFICATIONS)\r\n            }\r\n        } else {\r\n            if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.READ_EXTERNAL_STORAGE)\r\n                != PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                permissions.add(android.Manifest.permission.READ_EXTERNAL_STORAGE)\r\n            }\r\n        }\r\n\r\n        if (permissions.isNotEmpty()) {\r\n            ActivityCompat.requestPermissions(this, permissions.toTypedArray(), 100)\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun PulsePlayerApp() {\r\n    val context = LocalContext.current\r\n\r\n    LaunchedEffect(Unit) {\r\n        // ⚠\uFE0F Esperamos hasta que el usuario haya respondido los permisos\r\n        var retries = 10\r\n        while (!hasStoragePermission(context) && retries > 0) {\r\n            kotlinx.coroutines.delay(500)\r\n            retries--\r\n        }\r\n\r\n        if (!hasStoragePermission(context)) {\r\n            Log.e(\"PulsePlayer\", \"❌ Permiso de almacenamiento NO concedido\")\r\n            return@LaunchedEffect\r\n        }\r\n\r\n        try {\r\n            withContext(Dispatchers.IO) {\r\n                val dao = PulsePlayerDatabase.getDatabase(context).songDao()\r\n                MusicScanner.scanAndSyncSongs(context, dao)\r\n                Log.d(\"PulsePlayer\", \"✅ Canciones escaneadas correctamente\")\r\n            }\r\n        } catch (e: SecurityException) {\r\n            Log.e(\"PulsePlayer\", \"❌ SecurityException: ${e.message}\")\r\n        } catch (e: Exception) {\r\n            Log.e(\"PulsePlayer\", \"❌ Error escaneando canciones: ${e.message}\")\r\n        }\r\n    }\r\n\r\n    PulsePlayerTheme {\r\n        Navigation()\r\n    }\r\n}\r\n\r\nprivate fun hasStoragePermission(context: Context): Boolean {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n        ContextCompat.checkSelfPermission(\r\n            context,\r\n            android.Manifest.permission.READ_MEDIA_AUDIO\r\n        ) == PackageManager.PERMISSION_GRANTED\r\n    } else {\r\n        ContextCompat.checkSelfPermission(\r\n            context,\r\n            android.Manifest.permission.READ_EXTERNAL_STORAGE\r\n        ) == PackageManager.PERMISSION_GRANTED\r\n    }\r\n}\r\n\r\n@Composable\r\nfun isLandscape(): Boolean{\r\n    val config = LocalConfiguration.current\r\n    return config.orientation == Configuration.ORIENTATION_LANDSCAPE\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/pulseplayer/MainActivity.kt b/app/src/main/java/com/example/pulseplayer/MainActivity.kt
--- a/app/src/main/java/com/example/pulseplayer/MainActivity.kt	(revision 52e0a7045016f73aac0972dccb3d8795f4e857af)
+++ b/app/src/main/java/com/example/pulseplayer/MainActivity.kt	(date 1752119482714)
@@ -13,23 +13,28 @@
 import androidx.activity.enableEdgeToEdge
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
 import androidx.compose.ui.platform.LocalConfiguration
 import androidx.compose.ui.platform.LocalContext
 import androidx.core.app.ActivityCompat
 import androidx.core.content.ContextCompat
 import androidx.lifecycle.ProcessLifecycleOwner
 import com.example.pulseplayer.data.PulsePlayerDatabase
+import com.example.pulseplayer.data.entity.Song
 import com.example.pulseplayer.ui.theme.PulsePlayerTheme
 import com.example.pulseplayer.util.MusicScanner
 import com.example.pulseplayer.views.AppLifecycleObserver
 import com.example.pulseplayer.views.player.ExoPlayerManager
 import com.example.pulseplayer.views.service.MusicPlayerService
 import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.flow.first
 import kotlinx.coroutines.withContext
 
 class MainActivity : ComponentActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
+        val database = PulsePlayerDatabase.getDatabase(applicationContext)
 
         // 👉 Solicita permisos necesarios al iniciar
         requestAllPermissions()
@@ -53,7 +58,7 @@
         enableEdgeToEdge()
         setContent {
             PulsePlayerTheme {
-                PulsePlayerApp()
+                PulsePlayerApp(database)
             }
         }
     }
@@ -88,11 +93,11 @@
 }
 
 @Composable
-fun PulsePlayerApp() {
+fun PulsePlayerApp(database: PulsePlayerDatabase) {
     val context = LocalContext.current
+    val songsState = remember { mutableStateOf<List<Song>>(emptyList()) }
 
     LaunchedEffect(Unit) {
-        // ⚠️ Esperamos hasta que el usuario haya respondido los permisos
         var retries = 10
         while (!hasStoragePermission(context) && retries > 0) {
             kotlinx.coroutines.delay(500)
@@ -105,22 +110,24 @@
         }
 
         try {
+            database.openHelper.writableDatabase
             withContext(Dispatchers.IO) {
-                val dao = PulsePlayerDatabase.getDatabase(context).songDao()
+                val dao = database.songDao()
                 MusicScanner.scanAndSyncSongs(context, dao)
+                songsState.value = dao.getAll().first()
                 Log.d("PulsePlayer", "✅ Canciones escaneadas correctamente")
             }
-        } catch (e: SecurityException) {
-            Log.e("PulsePlayer", "❌ SecurityException: ${e.message}")
         } catch (e: Exception) {
             Log.e("PulsePlayer", "❌ Error escaneando canciones: ${e.message}")
         }
     }
 
     PulsePlayerTheme {
-        Navigation()
+        Navigation(songs = songsState.value) // ✅ se pasan aquí
     }
 }
+
+
 
 private fun hasStoragePermission(context: Context): Boolean {
     return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
Index: app/src/main/java/com/example/pulseplayer/NavController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pulseplayer\r\n\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.rememberNavController\r\nimport androidx.navigation.toRoute\r\nimport com.example.pulseplayer.views.MenuScreen\r\nimport com.example.pulseplayer.views.MusicScreen\r\nimport com.example.pulseplayer.views.favorite.FavoriteScreen\r\nimport com.example.pulseplayer.views.player.NowPlayingScreen\r\nimport com.example.pulseplayer.views.playbackhistory.PlaybackHistoryScreen\r\nimport com.example.pulseplayer.views.playlist.AddSongsToPlaylistScreen\r\nimport com.example.pulseplayer.views.playlist.PlaylistCreateScreen\r\nimport com.example.pulseplayer.views.playlist.PlaylistDetailsScreen\r\nimport com.example.pulseplayer.views.playlist.PlaylistScreen\r\nimport com.example.pulseplayer.views.viewmodel.PlayerViewModel\r\nimport kotlinx.serialization.Serializable\r\n\r\n//PRINCIPAL\r\n@Serializable\r\nobject Menu\r\n\r\n// MUSICA\r\n@Serializable\r\nobject Music\r\n\r\n@Serializable\r\ndata class NowPlaying(val songId: Int, val songIds: List<Int> )\r\n\r\n//PLAYLIST\r\n@Serializable\r\nobject PlaylistScreen\r\n\r\n@Serializable\r\nobject PlaylistCreateScreen\r\n\r\n@Serializable\r\ndata class PlaylistDetailScreen(val playlistId: Int)\r\n\r\n@Serializable\r\ndata class AddSongsToPlaylistScreen(val playlistId: Int)\r\n\r\n//PlaybackHistory\r\n@Serializable\r\nobject PlaybackHistoryScreen\r\n\r\n//FAVORITE\r\n@Serializable\r\nobject FavoriteScreen\r\n\r\n\r\n\r\n@Composable\r\nfun Navigation(){\r\n    val navController = rememberNavController()\r\n    val playerViewModel: PlayerViewModel = androidx.lifecycle.viewmodel.compose.viewModel()\r\n\r\n    NavHost(navController = navController, startDestination = Menu){\r\n        composable<Menu>{\r\n            MenuScreen(navController = navController)\r\n        }\r\n        composable<Music> {\r\n            MusicScreen(navController = navController)\r\n        }\r\n        composable<NowPlaying> { backStackEntry ->\r\n            val args = backStackEntry.toRoute<NowPlaying>()\r\n            NowPlayingScreen(navController = navController, songId = args.songId, songIds = args.songIds,viewModel = playerViewModel)\r\n        }\r\n        composable<PlaylistScreen> {\r\n            PlaylistScreen(navController)\r\n        }\r\n        composable<PlaylistCreateScreen> {\r\n            PlaylistCreateScreen(navController)\r\n        }\r\n        // composable<PlaylistDetailScreen> { backStackEntry ->\r\n        //     val args = backStackEntry.toRoute<PlaylistDetailScreen>()\r\n        //     PlaylistDetailScreen(navController, playlistId = args.playlistId)\r\n        // }\r\n\r\n        composable<PlaybackHistoryScreen> {\r\n            PlaybackHistoryScreen(navController, playerViewModel = playerViewModel)\r\n        }\r\n\r\n        composable<FavoriteScreen> {\r\n            FavoriteScreen(navController = navController)\r\n        }\r\n\r\n        composable<PlaylistDetailScreen> {backStackEntry ->\r\n            val args = backStackEntry.toRoute<PlaylistDetailScreen>()\r\n            PlaylistDetailsScreen(navController = navController,playlistId = args.playlistId)\r\n        }\r\n\r\n        composable<AddSongsToPlaylistScreen> { backStackEntry ->\r\n            val args = backStackEntry.toRoute<AddSongsToPlaylistScreen>()\r\n            AddSongsToPlaylistScreen(navController = navController, playlistId = args.playlistId)\r\n        }\r\n\r\n\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/pulseplayer/NavController.kt b/app/src/main/java/com/example/pulseplayer/NavController.kt
--- a/app/src/main/java/com/example/pulseplayer/NavController.kt	(revision 52e0a7045016f73aac0972dccb3d8795f4e857af)
+++ b/app/src/main/java/com/example/pulseplayer/NavController.kt	(date 1752120048692)
@@ -7,6 +7,7 @@
 import androidx.navigation.compose.composable
 import androidx.navigation.compose.rememberNavController
 import androidx.navigation.toRoute
+import com.example.pulseplayer.data.entity.Song
 import com.example.pulseplayer.views.MenuScreen
 import com.example.pulseplayer.views.MusicScreen
 import com.example.pulseplayer.views.favorite.FavoriteScreen
@@ -54,7 +55,7 @@
 
 
 @Composable
-fun Navigation(){
+fun Navigation(songs: List<Song>){
     val navController = rememberNavController()
     val playerViewModel: PlayerViewModel = androidx.lifecycle.viewmodel.compose.viewModel()
 
@@ -63,7 +64,7 @@
             MenuScreen(navController = navController)
         }
         composable<Music> {
-            MusicScreen(navController = navController)
+            MusicScreen(navController = navController) // ✅ corregido
         }
         composable<NowPlaying> { backStackEntry ->
             val args = backStackEntry.toRoute<NowPlaying>()
